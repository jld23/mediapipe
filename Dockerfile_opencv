ARG CUDA="11.2.0"
ARG UBUNTU="18.04"
ARG ARCH=""
ARG CUDNN="-cudnn8" # needs '-' to get level right if blank.

FROM nvidia/cuda${ARCH}:${CUDA}${CUDNN}-devel-ubuntu${UBUNTU}

ARG OPENCV="4.5.3"

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get upgrade -y &&\
    apt install software-properties-common -y &&\
    add-apt-repository ppa:deadsnakes/ppa &&\
    # Install build tools, build dependencies and python
    apt-get install -y \
    python3-pip \
    build-essential \
    cmake \
    git \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libeigen3-dev \
    libglew-dev \
    libgtk2.0-dev \
    libjpeg-dev \
    libpng-dev \
    libpostproc-dev \
    libpq-dev \
    libswscale-dev \
    libswscale-dev \
    libtbb2 \
    libtbb-dev \
    libtbb-dev \
    libtiff5-dev \
    libtiff-dev \
    libxine2-dev \
    pkg-config \
    unzip \
    wget \
    yasm \
    zlib1g-dev \
    ## Python
    python3-dev \
    python3-numpy \
    # python3.7-dev \
    # python-dev \
    # python-numpy \
    ## Mediapipe
    ca-certificates \
    curl \
    ffmpeg \
    gcc-8 g++-8 \
    gfortran \
    libatlas-base-dev \
    libdc1394-22-dev \
    libegl1-mesa-dev \
    libgles2 \
    libgles2-mesa-dev \
    libgtk-3-dev \
    libhdf5-dev \
    libjpeg-dev \
    libpng-dev \
    libprotobuf-dev \
    libswscale-dev \
    libtbb2 \
    libtbb-dev \
    libtiff-dev \
    libv4l-dev \
    libx264-dev \
    libxvidcore-dev \
    mesa-common-dev \
    mesa-utils \
    openexr \
    pkg-config \
    protobuf-compiler \
    vim 

WORKDIR /tmp
RUN wget https://github.com/opencv/opencv/archive/refs/tags/${OPENCV}.zip && unzip ${OPENCV}.zip && rm ${OPENCV}.zip
RUN wget https://github.com/opencv/opencv_contrib/archive/${OPENCV}.zip && unzip ${OPENCV}.zip && rm ${OPENCV}.zip
RUN mkdir opencv-${OPENCV}/build && \
    cd opencv-${OPENCV}/build && \
    cmake -DOPENCV_EXTRA_MODULES_PATH=/tmp/opencv_contrib-${OPENCV}/modules \
    -DWITH_CUDA=ON \
    -DWITH_CUDNN=ON \
    -DOPENCV_DNN_CUDA=ON \
    -DENABLE_FAST_MATH=ON \
    -DCUDA_FAST_MATH=ON \
    -DCUDA_ARCH_BIN='8.0 8.6' \
    # -DCUDA_ARCH_PTX='8.6' \
    -DWITH_CUBLAS=ON \
    -DOPENCV_ENABLE_NONFREE=ON \
    # -DWITH_GSTREAMER=ON \
    -DCMAKE_BUILD_TYPE=RELEASE \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DBUILD_TESTS=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_opencv_apps=ON \
    .. && \
    make -j"$(nproc)" && \
    # Install to /usr/local/lib
    make install && \
    ldconfig

RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 --slave /usr/bin/g++ g++ /usr/bin/g++-8
RUN python3 -m pip install --upgrade pip
RUN python3 -m pip install --upgrade setuptools
RUN python3 -m pip install wheel future numpy six tensorflow-gpu tf_slim

# RUN ln -s /usr/bin/python3.7 /usr/bin/python3

# Install bazel
ARG BAZEL_VERSION=3.7.2
RUN mkdir /bazel && \
    wget --no-check-certificate -O /bazel/installer.sh "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/b\
azel-${BAZEL_VERSION}-installer-linux-x86_64.sh" && \
    wget --no-check-certificate -O  /bazel/LICENSE.txt "https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE" && \
    chmod +x /bazel/installer.sh && \
    /bazel/installer.sh  && \
    rm -f /bazel/installer.sh

RUN rm -rf /tmp/* && rm -rf /var/lib/apt/lists/*

COPY . /mediapipe/

COPY tests /tmp

WORKDIR /mediapipe
RUN python3 setup.py gen_protos
# RUN python3 setup.py bdist_wheel
# RUN python3 setup.py install --link-opencv


# docker run -it --gpus all mediapipe:opencv python3 /tmp/cv_cuda.py
